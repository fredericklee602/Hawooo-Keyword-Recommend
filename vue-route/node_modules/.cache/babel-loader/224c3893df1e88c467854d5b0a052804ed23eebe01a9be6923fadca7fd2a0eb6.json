{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nconst web_api_url = 'http://127.0.0.1:5000';\nexport default {\n  data() {\n    return {\n      data: [],\n      columns: [],\n      // 用於儲存 CSV 中的欄位名稱\n      selectedColumns: {},\n      // 用於儲存欄位的勾選狀態\n      selectedColumnsArray: [],\n      uploadedFile: null,\n      // 存儲上傳文件\n      isServerReturn: false,\n      isLoading: false,\n      // 默認為false\n      isWatchData: false,\n      isFetching: false,\n      dataTable: {\n        attributeName: 'array' // 初始化屬性\n      },\n\n      keywordcount: 0,\n      VBTables: {\n        attributeName: 'array' // 初始化屬性\n      },\n\n      newVBData: '',\n      isPart3: false\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.uploadedFile = event.target.files[0];\n      if (this.uploadedFile.name.includes('csv')) {\n        Papa.parse(this.uploadedFile, {\n          complete: results => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      } else if (this.uploadedFile.name.includes('xl')) {\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n\n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1\n          });\n          this.columns = jsonData[0];\n          // console.log(\"Column Names:\", this.columns);\n        };\n\n        reader.readAsBinaryString(this.uploadedFile);\n      } else {\n        alert(\"請上傳CSV或Excel文件！\");\n      }\n    },\n    async handleSubmit() {\n      this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n      console.log(\"selectedColumnsArray\", this.selectedColumnsArray);\n      if (!this.uploadedFile) {\n        alert(\"請先選擇文件\");\n        return;\n      }\n      if (this.selectedColumnsArray.length != 1) {\n        alert(\"請選擇1個欄位!\");\n        return;\n      }\n\n      // 使用FormData來上傳文件和列名\n      const formData = new FormData();\n      formData.append('file', this.uploadedFile);\n      console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n      formData.append('columns', this.selectedColumnsArray);\n      console.log(\"formData\", formData);\n      // 開始上傳\n      this.isLoading = true;\n      try {\n        const response = await fetch(web_api_url + '/upload_keywords_data/', {\n          // 替換為你的服務器端點\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          alert('文件上傳成功！');\n          console.log(response); // 處理来自服務器的響應\n        } else {\n          alert('文件上傳失敗:' + response.message);\n        }\n      } catch (error) {\n        console.error(\"上傳錯誤:\", error);\n        alert('上傳過程中出現錯誤，請重試！');\n      } finally {\n        this.isLoading = false; // 結束上傳\n        this.isServerReturn = true;\n      }\n    },\n    async WatchKeywordsData() {\n      this.isWatchData = !this.isWatchData;\n      if (this.isWatchData) {\n        try {\n          const response = await fetch(web_api_url + '/return_keywords_data/');\n          // console.log(\"response\", response);\n          const data = await response.json();\n\n          // 假設API返回的是一个標準的JSON格式的DataFrame\n          this.dataTable = data.dataframe;\n          this.keywordcount = data.keywords_count;\n        } catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      }\n    },\n    async StartUpdateVDB() {\n      try {\n        const response = await fetch(web_api_url + '/update_vector_DB/');\n        const data = await response.json();\n        console.log(\"Start Update vector DB:\", data);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },\n    fetchData() {\n      axios.get(web_api_url + '/get_vectorDB_log').then(response => {\n        this.Flaskdata = response.data;\n        if (response.data['reload'] === true) {\n          this.isFetching = false;\n        }\n        if (response.data['done'] === true) {\n          this.isFetching = false;\n          this.isTrained = true;\n        }\n      });\n    },\n    async vectorDB_info() {\n      try {\n        const response = await fetch(web_api_url + '/return_table_information/');\n        const data = await response.json();\n        this.VBTables = data[\"vectorDB_table_name\"];\n        console.log(\"return_table_information:\", data[\"vectorDB_table_name\"]);\n        this.isPart3 = !this.isPart3;\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },\n    addData() {\n      if (this.newVBData) {\n        this.VBTables.push({\n          data: this.newVBData,\n          selected: false\n        });\n        this.newVBData = '';\n      } else {\n        alert('Please enter some data.');\n      }\n    }\n    // toggleFetching() {\n    //   this.StartUpdateVDB()\n    //   this.isFetching = !this.isFetching;    \n    //   if (this.isFetching) {\n    //     this.fetchData();\n    //     this.fetchInterval = setInterval(this.fetchData, 1000);\n    //   } else {\n    //     clearInterval(this.fetchInterval);  // 如果不抓取, 則停止定期抓取\n    //   }\n    // }\n  }\n};","map":{"version":3,"names":["Papa","XLSX","axios","web_api_url","data","columns","selectedColumns","selectedColumnsArray","uploadedFile","isServerReturn","isLoading","isWatchData","isFetching","dataTable","attributeName","keywordcount","VBTables","newVBData","isPart3","methods","handleFileChange","event","target","files","name","includes","parse","complete","results","reader","FileReader","onload","e","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","readAsBinaryString","alert","handleSubmit","Object","keys","filter","column","console","log","length","formData","FormData","append","response","fetch","method","body","ok","message","error","WatchKeywordsData","json","dataframe","keywords_count","StartUpdateVDB","fetchData","get","then","Flaskdata","isTrained","vectorDB_info","addData","push","selected"],"sources":["E:\\Fred\\AI_UI\\vue_route\\vue-route\\src\\views\\UpdateVectorDB.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 加載指示器 -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <img src=\"/jumpingsheep.gif\" alt=\"上傳中...\" class=\"loading-image\"/>\n    </div>\n    <!-- 第一部分 -->\n    <div v-if=\"isServerReturn==false\" class=\"First-Part\">\n      <input type=\"file\" @change=\"handleFileChange\">\n\n      <!-- 呈現欄位名稱的表格 -->\n      <table v-if=\"columns.length\">\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th>Column Name</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"column in columns\" :key=\"column\">\n            <td><input type=\"checkbox\" v-model=\"selectedColumns[column]\"></td>\n            <td>{{ column }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button class=\"submit-button\" @click=\"handleSubmit\" v-if=\"columns.length\">提交選取欄位</button>\n    </div>\n    \n    <!-- 第二部分 -->\n    <div v-if=\"isServerReturn\" class=\"Part2\">\n      <!-- 按鈕加載數據 -->\n      <button class=\"loadData-button\" @click=\"WatchKeywordsData\">觀看前處理資料</button>\n      <button v-if=\"isFetching==false\" class=\"update-vectorDB-button\" @click=\"vectorDB_info\">新增或更新Keywords向量資料庫</button>\n      <table v-if=\"isWatchData\">\n        <thead>\n          <tr>\n            <!-- 假設你知道你的DataFrame的列名 -->\n            <th>Keywords</th>\n            <!-- ... 其他列名 ... -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"row in dataTable\" :key=\"row.id\">\n            <td>{{ row['Keywords'] }}</td>\n            <!-- ... 其他數據列 ... -->\n          </tr>\n        </tbody>\n      </table>\n      <table v-if=\"isWatchData\">\n            <tr>\n                <th>Keywords總數量</th>\n            </tr>\n            <tbody>\n                <tr>\n                    <td>{{ keywordcount }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <!-- 第三部分 -->\n    <div v-if=\"isPart3\" class=\"Part3\">\n      <table  v-if=\"VBTables.length\">\n          <thead>\n              <tr>\n                  <th>Select</th>\n                  <th>Data</th>\n              </tr>\n          </thead>\n          <tbody>\n              <tr v-for=\"item in VBTables\"  :key=\"item\">\n                  <td><input type=\"checkbox\" v-model=\"item.selected\"></td>\n                  <td>{{ item.data }}</td>\n              </tr>\n          </tbody>\n      </table>\n\n      <input type=\"text\" v-model=\"newVBData\" placeholder=\"Enter new data\">\n      <button @click=\"addData\">Add Data</button>\n    </div>\n  </div>\n</template>\n<script>\n  import Papa from 'papaparse';\n  import * as XLSX from 'xlsx';\n  import axios from 'axios';\n  const web_api_url = 'http://127.0.0.1:5000';\n  export default {\n    data() {\n      return {\n        data: [],\n        columns: [],          // 用於儲存 CSV 中的欄位名稱\n        selectedColumns: {},  // 用於儲存欄位的勾選狀態\n        selectedColumnsArray:[],\n        uploadedFile: null,  // 存儲上傳文件\n        isServerReturn: false,\n        isLoading: false,  // 默認為false\n        isWatchData:false,\n        isFetching:false,\n        dataTable: { attributeName: 'array'  // 初始化屬性\n                    },\n        keywordcount:0,\n        VBTables: { attributeName: 'array'  // 初始化屬性\n                    },\n        newVBData: '',\n        isPart3: false\n      }\n    },\n    methods: {\n        handleFileChange(event) {\n        this.uploadedFile = event.target.files[0];\n        if (this.uploadedFile.name.includes('csv')) {\n          Papa.parse(this.uploadedFile, {\n            complete: (results) => {\n              this.data = results.data;\n              // console.log(\"this.data\", this.data); // assuming first row is header\n              this.columns = results.data[0];\n              // console.log(\"Column Names:\", this.columns); // assuming first row is header\n            }\n          });\n        }\n        else if (this.uploadedFile.name.includes('xl')) {\n          // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n          const reader = new FileReader();\n          \n          reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data, { type: 'binary' });\n            \n            // Assuming first sheet and first row is header\n            const firstSheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[firstSheetName];\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n            this.columns = jsonData[0]\n            // console.log(\"Column Names:\", this.columns);\n          };\n          reader.readAsBinaryString(this.uploadedFile);\n        }\n        else {\n            alert(\"請上傳CSV或Excel文件！\");\n        }\n      },async handleSubmit() {\n        this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n        console.log(\"selectedColumnsArray\", this.selectedColumnsArray);\n        if (!this.uploadedFile) {\n            alert(\"請先選擇文件\");\n            return;\n          }\n  \n          if (this.selectedColumnsArray.length != 1) {\n            alert(\"請選擇1個欄位!\");\n            return;\n          }\n  \n          // 使用FormData來上傳文件和列名\n          const formData = new FormData();\n          formData.append('file', this.uploadedFile);\n          console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n          formData.append('columns', this.selectedColumnsArray);\n          console.log(\"formData\", formData);\n          // 開始上傳\n          this.isLoading = true;\n          try {\n            const response = await fetch(web_api_url+'/upload_keywords_data/', { // 替換為你的服務器端點\n              method: 'POST',\n              body: formData\n            });\n            if (response.ok) {\n              alert('文件上傳成功！');\n              console.log(response); // 處理来自服務器的響應\n            } else {\n              alert('文件上傳失敗:' + response.message);\n            }\n          } catch (error) {\n            console.error(\"上傳錯誤:\", error);\n            alert('上傳過程中出現錯誤，請重試！');\n          } finally {\n            this.isLoading = false;  // 結束上傳\n            this.isServerReturn = true;\n          }\n      },async WatchKeywordsData() {\n        this.isWatchData = !this.isWatchData;\n  \n        if (this.isWatchData) {\n          try {\n            const response = await fetch(web_api_url+'/return_keywords_data/');\n            // console.log(\"response\", response);\n            const data = await response.json();\n  \n            // 假設API返回的是一个標準的JSON格式的DataFrame\n            this.dataTable = data.dataframe;\n\n            this.keywordcount = data.keywords_count;\n  \n          } catch (error) {\n            console.error(\"Error loading data:\", error);\n          }\n        }\n      },async StartUpdateVDB(){\n        try{\n          const response = await fetch(web_api_url+'/update_vector_DB/');\n          const data = await response.json();\n          console.log(\"Start Update vector DB:\", data);\n        } \n        catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      },fetchData() {\n        axios.get(web_api_url+'/get_vectorDB_log')\n          .then(response => {\n            this.Flaskdata = response.data;\n            if (response.data['reload']===true){\n              this.isFetching = false;\n            }\n            if (response.data['done']===true){\n              this.isFetching = false;\n              this.isTrained = true;\n            }\n          });\n      },async vectorDB_info() {\n        try{\n          const response = await fetch(web_api_url+'/return_table_information/');\n          const data = await response.json();\n          this.VBTables = data[\"vectorDB_table_name\"];\n          console.log(\"return_table_information:\", data[\"vectorDB_table_name\"]);\n          this.isPart3 = !this.isPart3;\n        } \n        catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      },addData() {\n                if (this.newVBData) {\n                    this.VBTables.push({ data: this.newVBData, selected: false });\n                    this.newVBData = '';\n                } else {\n                    alert('Please enter some data.');\n                }\n            }\n      // toggleFetching() {\n      //   this.StartUpdateVDB()\n      //   this.isFetching = !this.isFetching;    \n      //   if (this.isFetching) {\n      //     this.fetchData();\n      //     this.fetchInterval = setInterval(this.fetchData, 1000);\n      //   } else {\n      //     clearInterval(this.fetchInterval);  // 如果不抓取, 則停止定期抓取\n      //   }\n      // }\n    }\n\n  }\n</script>\n\n<style>\n/* 你可以加入些基本的樣式，讓表格看起來更整齊 */\n  table {\n    margin-top: 10px;\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: 10px;\n    width: 500px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  \n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n  \n  th {\n    background-color: #f2f2f2;\n  }\n  .loading-overlay {\n    position: fixed;   /* 全屏覆盖 */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(255, 255, 255, 0.8);  /* 半透明的白色背景 */\n    display: flex;  /* 使用 Flexbox */\n    justify-content: center;  /* 水平居中 */\n    align-items: center;  /* 垂直居中 */\n    z-index: 1000;  /* 保證在最前面 */\n  }\n  \n  .loading-image {\n    max-width: 400px;  /* 或其他合適的大小 */\n    max-height: 400px;\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}