{"ast":null,"code":"import Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nconst web_api_url = 'http://127.0.0.1:5000';\nexport default {\n  data() {\n    return {\n      data: [],\n      columns: [],\n      // 用於儲存 CSV 中的欄位名稱\n      selectedColumns: {},\n      // 用於儲存欄位的勾選狀態\n      selectedColumnsArray: [],\n      uploadedFile: null,\n      // 存儲上傳文件\n      isLoading: false,\n      // 默認為false\n      isWatchData: false,\n      isServerReturn: false,\n      dataTable: [],\n      Flaskdata: {},\n      isFetching: false,\n      fetchInterval: null,\n      // 用於存儲定期抓取的ID\n      isTrained: false\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.uploadedFile = event.target.files[0];\n      if (this.uploadedFile.name.includes('csv')) {\n        Papa.parse(this.uploadedFile, {\n          complete: results => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      } else if (this.uploadedFile.name.includes('xl')) {\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n\n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1\n          });\n          this.columns = jsonData[0];\n          // console.log(\"Column Names:\", this.columns);\n        };\n\n        reader.readAsBinaryString(this.uploadedFile);\n      } else {\n        alert(\"請上傳CSV或Excel文件！\");\n      }\n    },\n    handleCSV(event) {\n      const file = event.target.files[0];\n      Papa.parse(file, {\n        complete: results => {\n          this.data = results.data;\n          // console.log(\"this.data\", this.data); // assuming first row is header\n          this.columns = results.data[0];\n          // console.log(\"Column Names:\", this.columns); // assuming first row is header\n        }\n      });\n    },\n\n    handleExcel(event) {\n      this.uploadedFile = event.target.files[0];\n      // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, {\n          type: 'binary'\n        });\n\n        // Assuming first sheet and first row is header\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        this.columns = jsonData[0];\n        // console.log(\"Column Names:\", this.columns);\n      };\n\n      reader.readAsBinaryString(this.uploadedFile);\n    },\n    async handleSubmit() {\n      this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n      if (!this.uploadedFile) {\n        alert(\"請先選擇文件\");\n        return;\n      }\n      if (this.selectedColumnsArray.length != 2) {\n        alert(\"請選擇2個欄位!\");\n        return;\n      }\n\n      // 使用FormData來上傳文件和列名\n      const formData = new FormData();\n      formData.append('file', this.uploadedFile);\n      console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n      formData.append('columns', this.selectedColumnsArray);\n      console.log(\"formData\", formData);\n      // 開始上傳\n      this.isLoading = true;\n      try {\n        const response = await fetch(web_api_url + '/upload/', {\n          // 替換為你的服務器端點\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          alert('文件上傳成功！');\n          console.log(response); // 處理来自服務器的響應\n        } else {\n          alert('文件上傳失敗:' + response.message);\n        }\n      } catch (error) {\n        console.error(\"上傳錯誤:\", error);\n        alert('上傳過程中出現錯誤，請重試！');\n      } finally {\n        this.isLoading = false; // 結束上傳\n        this.isServerReturn = true;\n      }\n    },\n    async WatchData() {\n      this.isWatchData = !this.isWatchData;\n      if (this.isWatchData) {\n        try {\n          const response = await fetch(web_api_url + '/returndata/');\n          const data = await response.json();\n\n          // 假設API返回的是一个標準的JSON格式的DataFrame\n          this.dataTable = data;\n        } catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      }\n    },\n    GoBack() {\n      this.isServerReturn = false;\n    },\n    async StartTrain() {\n      try {\n        const response = await fetch(web_api_url + '/train/');\n        const data = await response.json();\n        console.log(\"StartTrain data:\", data);\n        this.TrainStart = true;\n        console.log(\"TrainStart data:\", this.TrainStart);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },\n    fetchData() {\n      axios.get(web_api_url + '/get_data').then(response => {\n        this.Flaskdata = response.data;\n        if (response.data['reload'] === true) {\n          this.isFetching = false;\n        }\n        if (response.data['trained'] === true) {\n          this.isFetching = false;\n          this.isTrained = true;\n        }\n      });\n    },\n    toggleFetching() {\n      this.StartTrain();\n      this.isFetching = !this.isFetching;\n      if (this.isFetching) {\n        this.fetchData();\n        this.fetchInterval = setInterval(this.fetchData, 500);\n      } else {\n        clearInterval(this.fetchInterval); // 如果不抓取, 則停止定期抓取\n      }\n    }\n  }\n};","map":{"version":3,"names":["Papa","XLSX","axios","web_api_url","data","columns","selectedColumns","selectedColumnsArray","uploadedFile","isLoading","isWatchData","isServerReturn","dataTable","Flaskdata","isFetching","fetchInterval","isTrained","methods","handleFileChange","event","target","files","name","includes","parse","complete","results","reader","FileReader","onload","e","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","readAsBinaryString","alert","handleCSV","file","handleExcel","handleSubmit","Object","keys","filter","column","length","formData","FormData","append","console","log","response","fetch","method","body","ok","message","error","WatchData","json","GoBack","StartTrain","TrainStart","fetchData","get","then","toggleFetching","setInterval","clearInterval"],"sources":["E:\\Fred\\AI_UI\\vue_route\\vue-route\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    \n    <!-- 加載指示器 -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <img src=\"/jumpingsheep.gif\" alt=\"上傳中...\" class=\"loading-image\"/>\n    </div>\n    <!-- 第一部分 -->\n    <div v-if=\"isServerReturn==false\" class=\"First-Part\">\n\n      <!-- <input type=\"file\" @change=\"handleCSV\"> -->\n      <input type=\"file\" @change=\"handleFileChange\">\n\n      <!-- 呈現欄位名稱的表格 -->\n      <table v-if=\"columns.length\">\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th>Column Name</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"column in columns\" :key=\"column\">\n            <td><input type=\"checkbox\" v-model=\"selectedColumns[column]\"></td>\n            <td>{{ column }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button class=\"submit-button\" @click=\"handleSubmit\" v-if=\"columns.length\">提交選取欄位</button>\n    </div>\n\n    <!-- 第二部分 -->\n    <div v-if=\"isServerReturn\" class=\"Next-Part\">\n      <!-- 按鈕加載數據 -->\n      <button class=\"loadData-button\" @click=\"WatchData\">觀看前處理資料</button>\n      <button class=\"back-button\" @click=\"GoBack\">返回前一步</button>\n      <button v-if=\"isFetching==false\" class=\"start-train-button\" @click=\"toggleFetching\">Train SBERT Model</button>\n      <table v-if=\"isWatchData\">\n        <thead>\n          <tr>\n            <!-- 假設你知道你的DataFrame的列名 -->\n            <th>Sentence1</th>\n            <th>Sentence2</th>\n            <!-- ... 其他列名 ... -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"row in dataTable\" :key=\"row.id\">\n            <td>{{ row['sentence1'] }}</td>\n            <td>{{ row['sentence2'] }}</td>\n            <!-- ... 其他數據列 ... -->\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-if=\"isFetching | isTrained\" class=\"trainlog\">\n        <h4>{{Flaskdata.data }}</h4>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nconst web_api_url = 'http://127.0.0.1:5000';\nexport default {\n  data() {\n    return {\n      data: [],\n      columns: [],          // 用於儲存 CSV 中的欄位名稱\n      selectedColumns: {},  // 用於儲存欄位的勾選狀態\n      selectedColumnsArray:[],\n      uploadedFile: null,  // 存儲上傳文件\n      isLoading: false,  // 默認為false\n      isWatchData:false,\n      isServerReturn: false,\n      dataTable: [],\n      Flaskdata: {},\n      isFetching:false,\n      fetchInterval: null,  // 用於存儲定期抓取的ID\n      isTrained: false\n    }\n  },\n  methods: {\n      handleFileChange(event) {\n      this.uploadedFile = event.target.files[0];\n      if (this.uploadedFile.name.includes('csv')) {\n        Papa.parse(this.uploadedFile, {\n          complete: (results) => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      }\n      else if (this.uploadedFile.name.includes('xl')) {\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, { type: 'binary' });\n          \n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          this.columns = jsonData[0]\n          // console.log(\"Column Names:\", this.columns);\n        };\n        reader.readAsBinaryString(this.uploadedFile);\n        }\n        else {\n            alert(\"請上傳CSV或Excel文件！\");\n          }\n      },\n      handleCSV(event) {\n        const file = event.target.files[0];\n        Papa.parse(file, {\n          complete: (results) => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      },handleExcel(event) {\n        this.uploadedFile = event.target.files[0];\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, { type: 'binary' });\n          \n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          this.columns = jsonData[0]\n          // console.log(\"Column Names:\", this.columns);\n        };\n        reader.readAsBinaryString(this.uploadedFile);\n      },async handleSubmit() {\n      this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n      if (!this.uploadedFile) {\n          alert(\"請先選擇文件\");\n          return;\n        }\n\n        if (this.selectedColumnsArray.length != 2) {\n          alert(\"請選擇2個欄位!\");\n          return;\n        }\n\n        // 使用FormData來上傳文件和列名\n        const formData = new FormData();\n        formData.append('file', this.uploadedFile);\n        console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n        formData.append('columns', this.selectedColumnsArray);\n        console.log(\"formData\", formData);\n        // 開始上傳\n        this.isLoading = true;\n        try {\n          const response = await fetch(web_api_url+'/upload/', { // 替換為你的服務器端點\n            method: 'POST',\n            body: formData\n          });\n          if (response.ok) {\n            alert('文件上傳成功！');\n            console.log(response); // 處理来自服務器的響應\n          } else {\n            alert('文件上傳失敗:' + response.message);\n          }\n        } catch (error) {\n          console.error(\"上傳錯誤:\", error);\n          alert('上傳過程中出現錯誤，請重試！');\n        } finally {\n          this.isLoading = false;  // 結束上傳\n          this.isServerReturn = true;\n        }\n    },async WatchData() {\n      this.isWatchData = !this.isWatchData;\n\n      if (this.isWatchData) {\n        try {\n          const response = await fetch(web_api_url+'/returndata/');\n          const data = await response.json();\n\n          // 假設API返回的是一个標準的JSON格式的DataFrame\n          this.dataTable = data;\n\n        } catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      }\n    },GoBack(){\n      this.isServerReturn = false;\n    },async StartTrain(){\n      try{\n        const response = await fetch(web_api_url+'/train/');\n        const data = await response.json();\n        console.log(\"StartTrain data:\", data);\n        this.TrainStart = true;\n        console.log(\"TrainStart data:\", this.TrainStart);\n      } \n      catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },fetchData() {\n      axios.get(web_api_url+'/get_data')\n        .then(response => {\n          this.Flaskdata = response.data;\n          if (response.data['reload']===true){\n            this.isFetching = false;\n          }\n          if (response.data['trained']===true){\n            this.isFetching = false;\n            this.isTrained = true;\n          }\n        });\n    },toggleFetching() {\n      this.StartTrain()\n      this.isFetching = !this.isFetching;    \n      if (this.isFetching) {\n        this.fetchData();\n        this.fetchInterval = setInterval(this.fetchData, 500);\n      } else {\n        clearInterval(this.fetchInterval);  // 如果不抓取, 則停止定期抓取\n      }\n    }\n  }\n}\n</script>\n\n<style>\n/* 你可以加入些基本的樣式，讓表格看起來更整齊 */\ntable {\n  margin-top: 10px;\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 10px;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\nth {\n  background-color: #f2f2f2;\n}\n.loading-overlay {\n  position: fixed;   /* 全屏覆盖 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.8);  /* 半透明的白色背景 */\n  display: flex;  /* 使用 Flexbox */\n  justify-content: center;  /* 水平居中 */\n  align-items: center;  /* 垂直居中 */\n  z-index: 1000;  /* 保證在最前面 */\n}\n\n.loading-image {\n  max-width: 400px;  /* 或其他合適的大小 */\n  max-height: 400px;\n}\n\n.submit-button {\n  background: linear-gradient(to bottom, #b0b0b0, #d9d8d8); /* 灰色漸變從較亮到較暗 */\n  color: rgb(4, 4, 4);  /* 文本顏色為白色 */\n  border: none;  /* 去除邊框 */\n  padding: 10px 20px;  /* 添加一些內邊距 */\n  border-radius: 5px;  /* 輕微的圓角 */\n  cursor: pointer;  /* 鼠標懸停時顯示手形 */\n  transition: 0.3s;  /* 平滑的過渡效果 */\n  margin-bottom: 20px;\n}\n\n/* 當屬標懸停在按鈕上時，為其應用一個稍微亮一些的漸變背景 */\n.submit-button:hover {\n  background: linear-gradient(to bottom, #c0c0c0, #d9d8d8);\n}\n\n/* 如果你還想在按鈕被點擊時有樣式變化，可以添加以下樣式 */\n.submit-button:active {\n  background: linear-gradient(to bottom, #dedede, #b0b0b0); /* 顏色轉變 */\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}