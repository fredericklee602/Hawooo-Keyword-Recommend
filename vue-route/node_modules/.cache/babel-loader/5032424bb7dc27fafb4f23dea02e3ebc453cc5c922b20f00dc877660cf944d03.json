{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"/jumpingsheep.gif\",\n  alt: \"上傳中...\",\n  class: \"loading-image\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"First-Part\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Select\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column Name\")])], -1 /* HOISTED */);\nconst _hoisted_7 = [\"onUpdate:modelValue\"];\nconst _hoisted_8 = {\n  key: 2,\n  class: \"Next-Part\"\n};\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createCommentVNode(\" 假設你知道你的DataFrame的列名 \"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Sentence1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Sentence2\"), /*#__PURE__*/_createCommentVNode(\" ... 其他列名 ... \")])], -1 /* HOISTED */);\nconst _hoisted_11 = {\n  key: 3,\n  class: \"trainlog\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 加載指示器 \"), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 第一部分 \"), $data.isServerReturn == false ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" <input type=\\\"file\\\" @change=\\\"handleCSV\\\"> \"), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileChange && $options.handleFileChange(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _createCommentVNode(\" 呈現欄位名稱的表格 \"), $data.columns.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_5, [_hoisted_6, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, column => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: column\n    }, [_createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => $data.selectedColumns[column] = $event\n    }, null, 8 /* PROPS */, _hoisted_7), [[_vModelCheckbox, $data.selectedColumns[column]]])]), _createElementVNode(\"td\", null, _toDisplayString(column), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $data.columns.length ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    class: \"submit-button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.handleSubmit && $options.handleSubmit(...args))\n  }, \"提交選取欄位\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 第二部分 \"), $data.isServerReturn ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createCommentVNode(\" 按鈕加載數據 \"), _createElementVNode(\"button\", {\n    class: \"loadData-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.WatchData && $options.WatchData(...args))\n  }, \"觀看前處理資料\"), _createElementVNode(\"button\", {\n    class: \"back-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.GoBack && $options.GoBack(...args))\n  }, \"返回前一步\"), $data.isFetching == false ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"start-train-button\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleFetching && $options.toggleFetching(...args))\n  }, \"Train SBERT Model\")) : _createCommentVNode(\"v-if\", true), $data.isWatchData ? (_openBlock(), _createElementBlock(\"table\", _hoisted_9, [_hoisted_10, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dataTable, row => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: row.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(row['sentence1']), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row['sentence2']), 1 /* TEXT */), _createCommentVNode(\" ... 其他數據列 ... \")]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), $data.isFetching | $data.isTrained ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"h4\", null, _toDisplayString($data.Flaskdata.data), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","src","alt","_hoisted_2","_createCommentVNode","_createElementBlock","$data","isLoading","_hoisted_1","_hoisted_3","isServerReturn","_hoisted_4","type","onChange","_cache","args","$options","handleFileChange","columns","length","_hoisted_5","_hoisted_6","_Fragment","_renderList","column","key","selectedColumns","$event","_toDisplayString","onClick","handleSubmit","_hoisted_8","WatchData","GoBack","isFetching","toggleFetching","isWatchData","_hoisted_9","_hoisted_10","dataTable","row","id","isTrained","_hoisted_11","Flaskdata","data"],"sources":["E:\\Fred\\AI_UI\\vue_route\\vue-route\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    \n    <!-- 加載指示器 -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <img src=\"/jumpingsheep.gif\" alt=\"上傳中...\" class=\"loading-image\"/>\n    </div>\n    <!-- 第一部分 -->\n    <div v-if=\"isServerReturn==false\" class=\"First-Part\">\n\n      <!-- <input type=\"file\" @change=\"handleCSV\"> -->\n      <input type=\"file\" @change=\"handleFileChange\">\n\n      <!-- 呈現欄位名稱的表格 -->\n      <table v-if=\"columns.length\">\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th>Column Name</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"column in columns\" :key=\"column\">\n            <td><input type=\"checkbox\" v-model=\"selectedColumns[column]\"></td>\n            <td>{{ column }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button class=\"submit-button\" @click=\"handleSubmit\" v-if=\"columns.length\">提交選取欄位</button>\n    </div>\n\n    <!-- 第二部分 -->\n    <div v-if=\"isServerReturn\" class=\"Next-Part\">\n      <!-- 按鈕加載數據 -->\n      <button class=\"loadData-button\" @click=\"WatchData\">觀看前處理資料</button>\n      <button class=\"back-button\" @click=\"GoBack\">返回前一步</button>\n      <button v-if=\"isFetching==false\" class=\"start-train-button\" @click=\"toggleFetching\">Train SBERT Model</button>\n      <table v-if=\"isWatchData\">\n        <thead>\n          <tr>\n            <!-- 假設你知道你的DataFrame的列名 -->\n            <th>Sentence1</th>\n            <th>Sentence2</th>\n            <!-- ... 其他列名 ... -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"row in dataTable\" :key=\"row.id\">\n            <td>{{ row['sentence1'] }}</td>\n            <td>{{ row['sentence2'] }}</td>\n            <!-- ... 其他數據列 ... -->\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-if=\"isFetching | isTrained\" class=\"trainlog\">\n        <h4>{{Flaskdata.data }}</h4>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nconst web_api_url = 'http://127.0.0.1:5000';\nexport default {\n  data() {\n    return {\n      data: [],\n      columns: [],          // 用於儲存 CSV 中的欄位名稱\n      selectedColumns: {},  // 用於儲存欄位的勾選狀態\n      selectedColumnsArray:[],\n      uploadedFile: null,  // 存儲上傳文件\n      isLoading: false,  // 默認為false\n      isWatchData:false,\n      isServerReturn: false,\n      dataTable: [],\n      Flaskdata: {},\n      isFetching:false,\n      fetchInterval: null,  // 用於存儲定期抓取的ID\n      isTrained: false\n    }\n  },\n  methods: {\n      handleFileChange(event) {\n      this.uploadedFile = event.target.files[0];\n      if (this.uploadedFile.name.includes('csv')) {\n        Papa.parse(this.uploadedFile, {\n          complete: (results) => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      }\n      else if (this.uploadedFile.name.includes('xl')) {\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, { type: 'binary' });\n          \n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          this.columns = jsonData[0]\n          // console.log(\"Column Names:\", this.columns);\n        };\n        reader.readAsBinaryString(this.uploadedFile);\n        }\n        else {\n            alert(\"請上傳CSV或Excel文件！\");\n          }\n      },\n      handleCSV(event) {\n        const file = event.target.files[0];\n        Papa.parse(file, {\n          complete: (results) => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      },handleExcel(event) {\n        this.uploadedFile = event.target.files[0];\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, { type: 'binary' });\n          \n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          this.columns = jsonData[0]\n          // console.log(\"Column Names:\", this.columns);\n        };\n        reader.readAsBinaryString(this.uploadedFile);\n      },async handleSubmit() {\n      this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n      if (!this.uploadedFile) {\n          alert(\"請先選擇文件\");\n          return;\n        }\n\n        if (this.selectedColumnsArray.length != 2) {\n          alert(\"請選擇2個欄位!\");\n          return;\n        }\n\n        // 使用FormData來上傳文件和列名\n        const formData = new FormData();\n        formData.append('file', this.uploadedFile);\n        console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n        formData.append('columns', this.selectedColumnsArray);\n        console.log(\"formData\", formData);\n        // 開始上傳\n        this.isLoading = true;\n        try {\n          const response = await fetch(web_api_url+'/upload/', { // 替換為你的服務器端點\n            method: 'POST',\n            body: formData\n          });\n          if (response.ok) {\n            alert('文件上傳成功！');\n            console.log(response); // 處理来自服務器的響應\n          } else {\n            alert('文件上傳失敗:' + response.message);\n          }\n        } catch (error) {\n          console.error(\"上傳錯誤:\", error);\n          alert('上傳過程中出現錯誤，請重試！');\n        } finally {\n          this.isLoading = false;  // 結束上傳\n          this.isServerReturn = true;\n        }\n    },async WatchData() {\n      this.isWatchData = !this.isWatchData;\n\n      if (this.isWatchData) {\n        try {\n          const response = await fetch(web_api_url+'/returndata/');\n          const data = await response.json();\n\n          // 假設API返回的是一个標準的JSON格式的DataFrame\n          this.dataTable = data;\n\n        } catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      }\n    },GoBack(){\n      this.isServerReturn = false;\n    },async StartTrain(){\n      try{\n        const response = await fetch(web_api_url+'/train/');\n        const data = await response.json();\n        console.log(\"StartTrain data:\", data);\n        this.TrainStart = true;\n        console.log(\"TrainStart data:\", this.TrainStart);\n      } \n      catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },fetchData() {\n      axios.get(web_api_url+'/get_data')\n        .then(response => {\n          this.Flaskdata = response.data;\n          if (response.data['reload']===true){\n            this.isFetching = false;\n          }\n          if (response.data['trained']===true){\n            this.isFetching = false;\n            this.isTrained = true;\n          }\n        });\n    },toggleFetching() {\n      this.StartTrain()\n      this.isFetching = !this.isFetching;    \n      if (this.isFetching) {\n        this.fetchData();\n        this.fetchInterval = setInterval(this.fetchData, 500);\n      } else {\n        clearInterval(this.fetchInterval);  // 如果不抓取, 則停止定期抓取\n      }\n    }\n  }\n}\n</script>\n\n<style>\n/* 你可以加入些基本的樣式，讓表格看起來更整齊 */\ntable {\n  margin-top: 10px;\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 10px;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\nth {\n  background-color: #f2f2f2;\n}\n.loading-overlay {\n  position: fixed;   /* 全屏覆盖 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.8);  /* 半透明的白色背景 */\n  display: flex;  /* 使用 Flexbox */\n  justify-content: center;  /* 水平居中 */\n  align-items: center;  /* 垂直居中 */\n  z-index: 1000;  /* 保證在最前面 */\n}\n\n.loading-image {\n  max-width: 400px;  /* 或其他合適的大小 */\n  max-height: 400px;\n}\n\n.submit-button {\n  background: linear-gradient(to bottom, #b0b0b0, #d9d8d8); /* 灰色漸變從較亮到較暗 */\n  color: rgb(4, 4, 4);  /* 文本顏色為白色 */\n  border: none;  /* 去除邊框 */\n  padding: 10px 20px;  /* 添加一些內邊距 */\n  border-radius: 5px;  /* 輕微的圓角 */\n  cursor: pointer;  /* 鼠標懸停時顯示手形 */\n  transition: 0.3s;  /* 平滑的過渡效果 */\n  margin-bottom: 20px;\n}\n\n/* 當屬標懸停在按鈕上時，為其應用一個稍微亮一些的漸變背景 */\n.submit-button:hover {\n  background: linear-gradient(to bottom, #c0c0c0, #d9d8d8);\n}\n\n/* 如果你還想在按鈕被點擊時有樣式變化，可以添加以下樣式 */\n.submit-button:active {\n  background: linear-gradient(to bottom, #dedede, #b0b0b0); /* 顏色轉變 */\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}