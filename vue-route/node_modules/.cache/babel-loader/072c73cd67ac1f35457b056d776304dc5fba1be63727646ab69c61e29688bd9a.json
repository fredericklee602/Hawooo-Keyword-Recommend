{"ast":null,"code":"import Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nconst web_api_url = 'http://127.0.0.1:5000';\nexport default {\n  data() {\n    return {\n      data: [],\n      columns: [],\n      // 用於儲存 CSV 中的欄位名稱\n      selectedColumns: {},\n      // 用於儲存欄位的勾選狀態\n      selectedColumnsArray: [],\n      uploadedFile: null,\n      // 存儲上傳文件\n      isLoading: false,\n      // 默認為false\n      isWatchData: false,\n      isServerReturn: false,\n      dataTable: [],\n      Flaskdata: {},\n      isFetching: false,\n      fetchInterval: null,\n      // 用於存儲定期抓取的ID\n      isTrained: false\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.uploadedFile = event.target.files[0];\n      if (this.uploadedFile.name.includes('csv')) {\n        Papa.parse(this.uploadedFile, {\n          complete: results => {\n            this.data = results.data;\n            // console.log(\"this.data\", this.data); // assuming first row is header\n            this.columns = results.data[0];\n            // console.log(\"Column Names:\", this.columns); // assuming first row is header\n          }\n        });\n      } else if (this.uploadedFile.name.includes('xl')) {\n        // console.log(\"file name\", this.uploadedFile); // assuming first row is header\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = e.target.result;\n          const workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n\n          // Assuming first sheet and first row is header\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1\n          });\n          this.columns = jsonData[0];\n          // console.log(\"Column Names:\", this.columns);\n        };\n\n        reader.readAsBinaryString(this.uploadedFile);\n      } else {\n        alert(\"請上傳CSV或Excel文件！\");\n      }\n    },\n    async handleSubmit() {\n      this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\n      if (!this.uploadedFile) {\n        alert(\"請先選擇文件\");\n        return;\n      }\n      if (this.selectedColumnsArray.length != 2) {\n        alert(\"請選擇2個欄位!\");\n        return;\n      }\n\n      // 使用FormData來上傳文件和列名\n      const formData = new FormData();\n      formData.append('file', this.uploadedFile);\n      console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\n      formData.append('columns', this.selectedColumnsArray);\n      console.log(\"formData\", formData);\n      // 開始上傳\n      this.isLoading = true;\n      try {\n        const response = await fetch(web_api_url + '/upload_train_data/', {\n          // 替換為你的服務器端點\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          alert('文件上傳成功！');\n          console.log(response); // 處理来自服務器的響應\n        } else {\n          alert('文件上傳失敗:' + response.message);\n        }\n      } catch (error) {\n        console.error(\"上傳錯誤:\", error);\n        alert('上傳過程中出現錯誤，請重試！');\n      } finally {\n        this.isLoading = false; // 結束上傳\n        this.isServerReturn = true;\n      }\n    },\n    async WatchData() {\n      this.isWatchData = !this.isWatchData;\n      if (this.isWatchData) {\n        try {\n          const response = await fetch(web_api_url + '/return_train_data/');\n          const data = await response.json();\n\n          // 假設API返回的是一个標準的JSON格式的DataFrame\n          this.dataTable = data;\n        } catch (error) {\n          console.error(\"Error loading data:\", error);\n        }\n      }\n    },\n    GoBack() {\n      this.isServerReturn = false;\n    },\n    async StartTrain() {\n      try {\n        const response = await fetch(web_api_url + '/train/');\n        const data = await response.json();\n        console.log(\"StartTrain data:\", data);\n        this.TrainStart = true;\n        console.log(\"TrainStart data:\", this.TrainStart);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },\n    fetchData() {\n      axios.get(web_api_url + '/get_train_log').then(response => {\n        this.Flaskdata = response.data;\n        if (response.data['reload'] === true) {\n          this.isFetching = false;\n        }\n        if (response.data['trained'] === true) {\n          this.isFetching = false;\n          this.isTrained = true;\n        }\n      });\n    },\n    toggleFetching() {\n      this.StartTrain();\n      this.isFetching = !this.isFetching;\n      if (this.isFetching) {\n        this.fetchData();\n        this.fetchInterval = setInterval(this.fetchData, 500);\n      } else {\n        clearInterval(this.fetchInterval); // 如果不抓取, 則停止定期抓取\n      }\n    }\n  }\n};","map":{"version":3,"names":["Papa","XLSX","axios","web_api_url","data","columns","selectedColumns","selectedColumnsArray","uploadedFile","isLoading","isWatchData","isServerReturn","dataTable","Flaskdata","isFetching","fetchInterval","isTrained","methods","handleFileChange","event","target","files","name","includes","parse","complete","results","reader","FileReader","onload","e","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","readAsBinaryString","alert","handleSubmit","Object","keys","filter","column","length","formData","FormData","append","console","log","response","fetch","method","body","ok","message","error","WatchData","json","GoBack","StartTrain","TrainStart","fetchData","get","then","toggleFetching","setInterval","clearInterval"],"sources":["E:\\Fred\\AI_UI\\vue_route\\vue-route\\src\\views\\AITrain.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      \r\n      <!-- 加載指示器 -->\r\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n        <img src=\"/jumpingsheep.gif\" alt=\"上傳中...\" class=\"loading-image\"/>\r\n      </div>\r\n      <!-- 第一部分 -->\r\n      <div v-if=\"isServerReturn==false\" class=\"First-Part\">\r\n        <h3 class=\"title_description\">\r\n            上傳相似對應的訓練資料(csv,xlsx)\r\n        </h3>\r\n  \r\n        <!-- <input type=\"file\" @change=\"handleCSV\"> -->\r\n        <input type=\"file\" @change=\"handleFileChange\">\r\n        \r\n      <div v-if=\"columns.length\">\r\n        <h3 class=\"title_description\">\r\n          選取2個上傳資料欄位\r\n        </h3>\r\n        <!-- 呈現欄位名稱的表格 -->\r\n        <table v-if=\"columns.length\">\r\n          <thead>\r\n            <tr>\r\n              <th>Select</th>\r\n              <th>Column Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"column in columns\" :key=\"column\">\r\n              <td><input type=\"checkbox\" v-model=\"selectedColumns[column]\"></td>\r\n              <td>{{ column }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <button class=\"submit-button\" @click=\"handleSubmit\" v-if=\"columns.length\">提交選取欄位</button>\r\n      </div>\r\n    </div>\r\n  \r\n      <!-- 第二部分 -->\r\n      <div v-if=\"isServerReturn\" class=\"Next-Part\">\r\n        <!-- 按鈕加載數據 -->\r\n        <button class=\"loadData-button\" @click=\"WatchData\">觀看前處理資料</button>\r\n        <button class=\"back-button\" @click=\"GoBack\">返回前一步</button>\r\n        <button v-if=\"isFetching==false\" class=\"start-train-button\" @click=\"toggleFetching\">Train SBERT Model</button>\r\n        <table v-if=\"isWatchData\">\r\n          <thead>\r\n            <tr>\r\n              <!-- 假設你知道你的DataFrame的列名 -->\r\n              <th>Sentence1</th>\r\n              <th>Sentence2</th>\r\n              <!-- ... 其他列名 ... -->\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"row in dataTable\" :key=\"row.id\">\r\n              <td>{{ row['sentence1'] }}</td>\r\n              <td>{{ row['sentence2'] }}</td>\r\n              <!-- ... 其他數據列 ... -->\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div v-if=\"isFetching | isTrained\" class=\"trainlog\">\r\n          <h4>{{Flaskdata.data }}</h4>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Papa from 'papaparse';\r\n  import * as XLSX from 'xlsx';\r\n  import axios from 'axios';\r\n  const web_api_url = 'http://127.0.0.1:5000';\r\n  export default {\r\n    data() {\r\n      return {\r\n        data: [],\r\n        columns: [],          // 用於儲存 CSV 中的欄位名稱\r\n        selectedColumns: {},  // 用於儲存欄位的勾選狀態\r\n        selectedColumnsArray:[],\r\n        uploadedFile: null,  // 存儲上傳文件\r\n        isLoading: false,  // 默認為false\r\n        isWatchData:false,\r\n        isServerReturn: false,\r\n        dataTable: [],\r\n        Flaskdata: {},\r\n        isFetching:false,\r\n        fetchInterval: null,  // 用於存儲定期抓取的ID\r\n        isTrained: false,\r\n      }\r\n    },\r\n    methods: {\r\n        handleFileChange(event) {\r\n        this.uploadedFile = event.target.files[0];\r\n        if (this.uploadedFile.name.includes('csv')) {\r\n          Papa.parse(this.uploadedFile, {\r\n            complete: (results) => {\r\n              this.data = results.data;\r\n              // console.log(\"this.data\", this.data); // assuming first row is header\r\n              this.columns = results.data[0];\r\n              // console.log(\"Column Names:\", this.columns); // assuming first row is header\r\n            }\r\n          });\r\n        }\r\n        else if (this.uploadedFile.name.includes('xl')) {\r\n          // console.log(\"file name\", this.uploadedFile); // assuming first row is header\r\n          const reader = new FileReader();\r\n          \r\n          reader.onload = (e) => {\r\n            const data = e.target.result;\r\n            const workbook = XLSX.read(data, { type: 'binary' });\r\n            \r\n            // Assuming first sheet and first row is header\r\n            const firstSheetName = workbook.SheetNames[0];\r\n            const worksheet = workbook.Sheets[firstSheetName];\r\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n            this.columns = jsonData[0]\r\n            // console.log(\"Column Names:\", this.columns);\r\n          };\r\n          reader.readAsBinaryString(this.uploadedFile);\r\n          }\r\n          else {\r\n              alert(\"請上傳CSV或Excel文件！\");\r\n            }\r\n        },async handleSubmit() {\r\n        this.selectedColumnsArray = Object.keys(this.selectedColumns).filter(column => this.selectedColumns[column]);\r\n        if (!this.uploadedFile) {\r\n            alert(\"請先選擇文件\");\r\n            return;\r\n          }\r\n  \r\n          if (this.selectedColumnsArray.length != 2) {\r\n            alert(\"請選擇2個欄位!\");\r\n            return;\r\n          }\r\n  \r\n          // 使用FormData來上傳文件和列名\r\n          const formData = new FormData();\r\n          formData.append('file', this.uploadedFile);\r\n          console.log(\"selectedColumnsArray Names:\", this.selectedColumnsArray);\r\n          formData.append('columns', this.selectedColumnsArray);\r\n          console.log(\"formData\", formData);\r\n          // 開始上傳\r\n          this.isLoading = true;\r\n          try {\r\n            const response = await fetch(web_api_url+'/upload_train_data/', { // 替換為你的服務器端點\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n            if (response.ok) {\r\n              alert('文件上傳成功！');\r\n              console.log(response); // 處理来自服務器的響應\r\n            } else {\r\n              alert('文件上傳失敗:' + response.message);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"上傳錯誤:\", error);\r\n            alert('上傳過程中出現錯誤，請重試！');\r\n          } finally {\r\n            this.isLoading = false;  // 結束上傳\r\n            this.isServerReturn = true;\r\n          }\r\n      },async WatchData() {\r\n        this.isWatchData = !this.isWatchData;\r\n  \r\n        if (this.isWatchData) {\r\n          try {\r\n            const response = await fetch(web_api_url+'/return_train_data/');\r\n            const data = await response.json();\r\n  \r\n            // 假設API返回的是一个標準的JSON格式的DataFrame\r\n            this.dataTable = data;\r\n  \r\n          } catch (error) {\r\n            console.error(\"Error loading data:\", error);\r\n          }\r\n        }\r\n      },GoBack(){\r\n        this.isServerReturn = false;\r\n      },async StartTrain(){\r\n        try{\r\n          const response = await fetch(web_api_url+'/train/');\r\n          const data = await response.json();\r\n          console.log(\"StartTrain data:\", data);\r\n          this.TrainStart = true;\r\n          console.log(\"TrainStart data:\", this.TrainStart);\r\n        } \r\n        catch (error) {\r\n          console.error(\"Error loading data:\", error);\r\n        }\r\n      },fetchData() {\r\n        axios.get(web_api_url+'/get_train_log')\r\n          .then(response => {\r\n            this.Flaskdata = response.data;\r\n            if (response.data['reload']===true){\r\n              this.isFetching = false;\r\n            }\r\n            if (response.data['trained']===true){\r\n              this.isFetching = false;\r\n              this.isTrained = true;\r\n            }\r\n          });\r\n      },toggleFetching() {\r\n        this.StartTrain()\r\n        this.isFetching = !this.isFetching;    \r\n        if (this.isFetching) {\r\n          this.fetchData();\r\n          this.fetchInterval = setInterval(this.fetchData, 500);\r\n        } else {\r\n          clearInterval(this.fetchInterval);  // 如果不抓取, 則停止定期抓取\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n  /* 你可以加入些基本的樣式，讓表格看起來更整齊 */\r\n  table {\r\n    margin-top: 10px;\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin-bottom: 10px;\r\n    width: 500px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n  \r\n  th, td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n  }\r\n  \r\n  th {\r\n    background-color: #f2f2f2;\r\n  }\r\n  .loading-overlay {\r\n    position: fixed;   /* 全屏覆盖 */\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(255, 255, 255, 0.8);  /* 半透明的白色背景 */\r\n    display: flex;  /* 使用 Flexbox */\r\n    justify-content: center;  /* 水平居中 */\r\n    align-items: center;  /* 垂直居中 */\r\n    z-index: 1000;  /* 保證在最前面 */\r\n  }\r\n  \r\n  .loading-image {\r\n    max-width: 400px;  /* 或其他合適的大小 */\r\n    max-height: 400px;\r\n  }\r\n  \r\n  .submit-button {\r\n    background: linear-gradient(to bottom, #b0b0b0, #d9d8d8); /* 灰色漸變從較亮到較暗 */\r\n    color: rgb(4, 4, 4);  /* 文本顏色為白色 */\r\n    border: none;  /* 去除邊框 */\r\n    padding: 10px 20px;  /* 添加一些內邊距 */\r\n    border-radius: 5px;  /* 輕微的圓角 */\r\n    cursor: pointer;  /* 鼠標懸停時顯示手形 */\r\n    transition: 0.3s;  /* 平滑的過渡效果 */\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  /* 當屬標懸停在按鈕上時，為其應用一個稍微亮一些的漸變背景 */\r\n  .submit-button:hover {\r\n    background: linear-gradient(to bottom, #c0c0c0, #d9d8d8);\r\n  }\r\n  \r\n  /* 如果你還想在按鈕被點擊時有樣式變化，可以添加以下樣式 */\r\n  .submit-button:active {\r\n    background: linear-gradient(to bottom, #dedede, #b0b0b0); /* 顏色轉變 */\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}